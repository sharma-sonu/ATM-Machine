import java.util.ArrayList;
import javax.swing.JOptionPane;

public class AtmMachine extends javax.swing.JFrame {
    private double balance; // User's account balance
    private int pin; // User's PIN for authentication
    private ArrayList<String> transactionHistory = new ArrayList<>(); // Stores the history of transactions

    // Constructor to initialize the ATM with default balance and PIN
    public AtmMachine() {
        initComponents(); 
        balance = 0.0; // Initial balance set to 0
        pin = 1234; // Default PIN set to 1234
    }

    @SuppressWarnings("unchecked")
    // Method to initialize the components (automatically generated by NetBeans)
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        pinField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter PIN:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        displayArea.setColumns(20);
        displayArea.setRows(5);
        jScrollPane1.setViewportView(displayArea);

        // Layout setup using GroupLayout (NetBeans default)
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pinField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loginButton)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }

    // Method called when login button is pressed
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int inputPin = Integer.parseInt(pinField.getText());
        if (verifyPIN(inputPin)) { // If PIN is correct, show ATM menu
            showATMMenu();
        } else {
            displayArea.setText("Incorrect PIN! Please try again.");
        }
    }

    // Method to check account balance
    public void checkBalance() {
        displayArea.setText("Current Balance: " + balance);
        transactionHistory.add("Balance Inquiry: " + balance); // Record the transaction
    }

    // Method to withdraw cash
    public void withdrawCash(double amount) {
        if (amount > balance) { // Check if balance is sufficient
            displayArea.setText("Insufficient balance!");
        } else {
            balance -= amount; // Deduct amount from balance
            displayArea.setText("Please collect your cash: " + amount);
            transactionHistory.add("Withdrawal: " + amount); // Record the transaction
        }
    }

    // Method to deposit cash
    public void depositCash(double amount) {
        balance += amount; // Add amount to balance
        displayArea.setText("Amount deposited: " + amount);
        transactionHistory.add("Deposit: " + amount); // Record the transaction
    }

    // Method to change PIN
    public void changePIN(int oldPin, int newPin) {
        if (oldPin == pin) { // Check if old PIN is correct
            pin = newPin; // Update to new PIN
            displayArea.setText("PIN changed successfully!");
            transactionHistory.add("PIN changed"); // Record the transaction
        } else {
            displayArea.setText("Incorrect PIN. Please try again.");
        }
    }

    // Method to show transaction history
    public void showTransactionHistory() {
        StringBuilder history = new StringBuilder("Transaction History:\n");
        for (String transaction : transactionHistory) {
            history.append(transaction).append("\n"); // Append each transaction to the history
        }
        displayArea.setText(history.toString()); // Display transaction history
    }

    // Method to verify if the entered PIN is correct
    public boolean verifyPIN(int inputPin) {
        return inputPin == pin; // Return true if PIN matches, else false
    }

    // Method to show the ATM menu options
    public void showATMMenu() {
        String[] options = {"Balance Inquiry", "Withdraw", "Deposit", "Change PIN", "Transaction History"};
        int choice = JOptionPane.showOptionDialog(this, "Choose an option:", "ATM Menu",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        
        switch (choice) {
            case 0:
                checkBalance(); // Show balance inquiry
                break;
            case 1:
                String withdrawInput = JOptionPane.showInputDialog("Enter amount to withdraw:");
                withdrawCash(Double.parseDouble(withdrawInput)); // Withdraw cash
                break;
            case 2:
                String depositInput = JOptionPane.showInputDialog("Enter amount to deposit:");
                depositCash(Double.parseDouble(depositInput)); // Deposit cash
                break;
            case 3:
                String oldPinInput = JOptionPane.showInputDialog("Enter current PIN:");
                String newPinInput = JOptionPane.showInputDialog("Enter new PIN:");
                changePIN(Integer.parseInt(oldPinInput), Integer.parseInt(newPinInput)); // Change PIN
                break;
            case 4:
                showTransactionHistory(); // Show transaction history
                break;
            default:
                break;
        }
    }

    // Main method to launch the application
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AtmMachine().setVisible(true); // Make the ATM interface visible
            }
        });
    }

    // Variables declaration
    private javax.swing.JTextArea displayArea; // To display ATM information
    private javax.swing.JButton loginButton; // Login button
    private javax.swing.JLabel jLabel1; // Label for PIN prompt
    private javax.swing.JScrollPane jScrollPane1; // Scroll pane for the display area
    private javax.swing.JTextField pinField; // Text field for entering the PIN
}
